class List {
	field int data;
	field List next;
	
	/* Creates a new List object. */
	constructor List new(int car, List cdr) {
		let data = car;
		let next = cdr;
		return this;
	}

	/* Disposes this List by recursively disposing its tail. */
	method void dispose() {
		if (~(next =  null)) {
			do next.dispose();
		}
		// Use an OS routine to recycle the memory held by this object.
		do Memory.deAlloc(this);
		return;
	}

	/* Prints the list*/

	method void print() {
		do Output.printString(" -> ");
		do Output.printInt(data);
		if (~(next =  null)) {
			do next.print();
		}
		return;
	}

	/* Inserts the argument in the right position of the list (ascending order)*/
	method void insertInOrder(int ins){

		var List v;

		// Check if element should be inserted
		if (ins < data) {
			let v = List.new(data, next);	// Link new element to rest of array
			let next = v;					// Link current element to new element
			let data = ins;					// Switch values
			return;
		}

		// Check if last element in array, if so, append to list
		if (next = null) {
			let v = List.new(ins, null); 	// Link new element to null (last element)
			let next = v;					// Link current element to new element
			return;	
		}

		// Check next element
		do next.insertInOrder(ins);

		return;
	}

	/* Searches the argument in the list, if found, it returns the corresponding List object*/
	method List find(int toFind){

		if (data = toFind) { return this; } // Check if value
		if (next = null)   { return null; } // Check if last value
		return next.find(toFind);			// Go to next element
	}
} 
